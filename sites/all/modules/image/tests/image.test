<?php
// $Id: image.test,v 1.3 2009/02/01 03:10:34 sun Exp $

/**
 * Test image functionality.
 */
class ImageTestCase extends DrupalWebTestCase {
  protected $web_user;
  protected $image;
  protected $another_image;
  
  function getInfo() {
    return array(
      'name' => t('Image functionality'),
      'description' => t('Test Image module functionality.'),
      'group' => t('Image'),
    );
  }

  function setUp() {
    parent::setUp('image');
    
    // User to create images.
    $this->web_user = $this->drupalCreateUser(array('create images', 'view original images', 'edit own images', 'edit images'));
    $this->drupalLogin($this->web_user);
    
    // Uploadable image.
    $this->image = 'misc' . DIRECTORY_SEPARATOR . 'druplicon.png';
    $this->another_image = 'misc' . DIRECTORY_SEPARATOR . 'throbber.gif';

    // Set small dimensions for testing scale so $this->image is small enough.
    $image_sizes = image_get_sizes();
    $image_sizes['_original']['operation'] = 'scale';
    $image_sizes['thumbnail']['operation'] = 'scale';
    $image_sizes['thumbnail']['width'] = 5;
    $image_sizes['thumbnail']['height'] = 5;
    $image_sizes['preview']['operation'] = 'scale';
    $image_sizes['preview']['width'] = 10;
    $image_sizes['preview']['height'] = 10;
    variable_set('image_sizes', $image_sizes);
  }
  
  /**
   * Verify creating/displaying/editing/deleting image nodes.
   */
  function testNode() {
    // Create an image.
    $edit = array(
      'title' => $this->randomName(),
      'body' => $this->randomName(),
      'files[image]' => realpath($this->image),
    );
    $this->drupalPost('node/add/image', $edit, t('Save'));
    
    $this->assertRaw(t('@type %title has been created.', array('@type' => 'Image', '%title' => $edit['title'])), t('Image created.'));
    
    $node = node_load(array('title' => $edit['title']));
    $this->assertTrue($node, t('Image found in database.'));

    // Display an image.
    $this->drupalGet('node/' . $node->nid);
    $this->assertPattern('@<img[^>]+?' . $node->images['preview'] . '[^>]+?>@', t('Image preview displayed on the page.'));
    $this->assertTrue(file_exists($node->images['preview']), t('Image preview exists.'));

    $this->drupalGet('node/' . $node->nid, array('query' => 'size=_original'));
    $this->assertPattern('@<img[^>]+?' . $node->images['_original'] . '[^>]+?>@', t('Original image displayed on the page.'));
    $this->assertTrue(file_exists($node->images['_original']), t('Original image exists.'));
    
    $this->drupalGet('node/' . $node->nid, array('query' => 'size=thumbnail'));
    $this->assertPattern('@<img[^>]+?' . $node->images['thumbnail'] . '[^>]+?>@', t('Image thumbnail displayed on the page.'));
    $this->assertTrue(file_exists($node->images['thumbnail']), t('Image thumbnail exists.'));
    
    // Edit an image.
    $another_edit = array(
      'title' => $edit['title'],
      'files[image]' => realpath($this->another_image),
    );
    $this->drupalPost('node/' . $node->nid .'/edit', $another_edit, t('Save'));
    $another_node = node_load(array('title' => $edit['title']));
    $this->assertFalse(file_exists($node->images['preview']) || file_exists($node->images['_original']) || file_exists($node->images['thumbnail']), t('The previous image deleted.'));
    
    // Delete an image.
    $this->drupalPost('node/' . $node->nid .'/delete', array(), t('Delete'));
    $this->assertRaw(t('@type %title has been deleted.', array('@type' => 'Image', '%title' => $edit['title'])), t('Image created.'));
    $node = node_load(array('title' => $edit['title']));
    $this->assertFalse($node, t('Image not found in database.'));
    $this->assertFalse(file_exists($another_node->images['preview']) || file_exists($another_node->images['_original']) || file_exists($another_node->images['thumbnail']), t('Image deleted.'));
  }

  /**
   * Test image node creation.
   */
  function testCreateNode() {
    $edit = array(
      'title' => $this->randomName(),
      'body' => $this->randomName(),
      'files[image]' => realpath($this->image),
    );
    $this->drupalPost('node/add/image', $edit, t('Save'));
    $this->assertRaw(t('@type %title has been created.', array('@type' => 'Image', '%title' => $edit['title'])), t('Image created.'));
    
    $node_post = node_load(array('title' => $edit['title']));
    $this->assertTrue($node_post, t('Image found in database.'));

    // Make a copy of the image so image_create_node_from() deletes original image.
    file_copy($edit['files[image]'], file_directory_temp());
    $node_api = image_create_node_from(file_directory_temp() . '/' . basename($edit['files[image]']), $edit['title'], $edit['body']);
    // Rebuild images.
    $node_api = node_load($node_api->nid);

    // Check equality of nodes.
    $equality = 
      ($node_post->title == $node_api->title) && 
      (strip_tags($node_post->body) == strip_tags($node_api->body)) &&
      (filesize($node_post->images['_original']) == filesize($node_api->images['_original'])) &&
      (filesize($node_post->images['preview']) == filesize($node_api->images['preview'])) &&
      (filesize($node_post->images['thumbnail']) == filesize($node_api->images['thumbnail']));
    $this->assertTrue($equality, t('Images nodes are equal.'));
  }
}
