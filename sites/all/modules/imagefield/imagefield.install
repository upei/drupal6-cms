<?php
// $Id: imagefield.install,v 1.19 2009/01/08 17:48:44 drewish Exp $

/**
 * Implementation of hook_install().
 */

function imagefield_install() {
  drupal_load('module', 'content');
  content_notify('install', 'imagefield');
}

function imagefield_uninstall() {
  drupal_load('module', 'content');
  content_notify('uninstall', 'imagefield');
}

function imagefield_enable() {
  drupal_load('module', 'content');
  content_notify('enable', 'imagefield');
}

function imagefield_disable() {
  drupal_load('module', 'content');
  content_notify('disable', 'imagefield');
}

/**
 * Data is now stored in per-field tables.
 */
function imagefield_update_1() {
  $ret = array();

  include_once(drupal_get_path('module', 'content') .'/content.module');
  include_once(drupal_get_path('module', 'content') .'/content_admin.inc');


  $fields = content_fields();

  foreach ($fields as $field) {
    switch ($field['type']) {
      case 'file':
        $columns = array(
          'list' => array('type' => 'int', 'not null' => TRUE, 'default' => '0'),
        );
        content_alter_db_field(array(), array(), $field, $columns);
        break;
    }
  }
  db_query('DELETE FROM {cache}');
  return $ret;
}

/**
 * Schema change to enable alt and title tags.
 */
function imagefield_update_2() {
  $ret = array();

  include_once(drupal_get_path('module', 'content') .'/content.module');
  include_once(drupal_get_path('module', 'content') .'/content_admin.inc');

  $fields = content_fields();

  foreach ($fields as $field) {
    switch ($field['type']) {
      case 'image':
        $oldcolumns = array(
          'fid' => array('type' => 'int', 'not null' => TRUE, 'default' => '0'),
        );
        $newcolumns = array(
          'fid' => array('type' => 'int', 'not null' => TRUE, 'default' => '0'),
          'title' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
          'alt' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
        );
        content_alter_db_field($field, $oldcolumns, $field, $newcolumns);
        break;
    }
    drupal_set_message('altered: <br /><pre>'. print_r($field, true) .'</pre>');
  }

  db_query('DELETE FROM {cache}');
  return $ret;
}

/**
 * Change default formatter key from 'default' to 'imagefield_default'.
 */
function imagefield_update_3() {
  $ret = array();
  include_once(drupal_get_path('module', 'content') .'/content.module');
  $result = db_query("SELECT field_name, type_name, display_settings FROM {node_field_instance} WHERE widget_type = 'image'");
  while ($row = db_fetch_array($result)) {
    $needs_update = FALSE;
    $display_settings = unserialize($row['display_settings']);
    foreach (_content_admin_display_contexts() as $context) {
      if ($display_settings[$context]['format'] == 'default') {
        $display_settings[$context]['format'] = 'imagefield_default';
        $needs_update = TRUE;
      }
    }
    if ($needs_update) {
      db_query("UPDATE {node_field_instance} SET display_settings = '%s' WHERE type_name = '%s' AND field_name = '%s'", serialize($display_settings), $row['type_name'], $row['field_name']);
    }
  }
  content_clear_type_cache();
  return $ret;
}

/**
 * Upgrade to CCK 2 and Drupal 6.
 */
function imagefield_update_6001() {
  // Make sure CCK's been updated first.
  if ($abort = content_check_update('imagefield')) {
    return $abort;
  }

  module_load_include('inc', 'content', 'includes/content.admin');
  module_load_include('inc', 'content', 'includes/content.crud');

  $ret[] = update_sql("UPDATE {". content_instance_tablename() ."} SET widget_type = 'imagefield_widget' WHERE widget_type = 'image'");
  content_associate_fields('imagefield');

  foreach (content_types_install() as $type_name => $fields) {
    foreach ($fields as $field) {
      // Skip non imagefields.
      if ($field['type'] != 'image') continue;

      // Map 'max_number_images' parameter to CCK 'multiple'.
      if (!empty($field['widget']['multiple']) && isset($field['widget']['max_number_images'])) {
        if ($field['widget']['max_number_images'] == 0) {
          $field['multiple'] = 1; // 1 means "Unlimited" in CCK.
        }
        elseif ($field['widget']['max_number_images'] == 1) {
          $field['multiple'] = 0; // 0 means "Not Multiple" in CCK.
        }
        else {
          $field['multiple'] == $field['widget']['max_number_images'];
        }
      }
      unset($field['widget']['max_number_images']);

      // Rename image_path to file_path to help convergence with filefield.module.
      $field['widget']['file_path'] = $field['widget']['image_path'];

      // Update format names.
      $display_settings = array('teaser', 'full', '4');
      foreach ($display_settings as $context) {
        switch($field['display_settings'][$context]['format']) {
          case 'imagefield_nodelink':
            $field['display_settings'][$context]['format'] = 'image_nodelink';
            break;
          case 'imagefield_imagelink':
            $field['display_settings'][$context]['format'] = 'image_imagelink';
            break;
          case 'imagefield_path':
            $field['display_settings'][$context]['format'] = 'path_plain';
            break;
          case 'imagefield_url':
            $field['display_settings'][$context]['format'] = 'url_plain';
            break;
          case 'imagefield_default':
            $field['display_settings'][$context]['format'] = 'image_plain';
            break;
        }
      }

      // Set list options inherited from file field to behave consistently with old imagefield.
      $field['list_default'] = 1;
      $field['force_list_default'] = 1;

      content_field_instance_update($field);
    }
  }

  content_clear_type_cache(TRUE);

  return $ret;
}

/**
 * Migrate fields to the new structure.
 */
function imagefield_update_6002(&$context) {
  include_once './'. drupal_get_path('module', 'content') .'/content.install';
  include_once './'. drupal_get_path('module', 'imagefield') .'/imagefield_file.inc';

  $ret = array();

  if (!isset($context['sandbox']['progress'])) {
    if ($abort = content_check_update('imagefield')) {
      return $abort;
    }

    // Get the latest cache values and schema.
    content_clear_type_cache(TRUE, TRUE);

    // Grab the list of fields to update.
    $context['sandbox']['fields'] = array();
    foreach (content_types_install() as $type_name => $fields) {
      foreach ($fields as $field) {
        if ($field['type'] == 'image') {
          // We only process a given field once.
          $context['sandbox']['fields'][$field['field_name']] = $field;
        }
      }
    }

    if (empty($context['sandbox']['fields'])) {
      return $ret;
    }

    $context['sandbox']['progress'] = 0;
    $context['sandbox']['total'] = count($context['sandbox']['fields']);
    $context['sandbox']['current_node'] = 0;
  }

  $field = array_shift($context['sandbox']['fields']);
  $db_info = content_database_info($field);
  $table = $db_info['table'];
  $col_fid = $field['field_name'] .'_fid';
  $col_alt = $field['field_name'] .'_alt';
  $col_title = $field['field_name'] .'_title';
  $col_data = $field['field_name'] .'_data';

  $limit = 10;
  $result = db_query_range("SELECT * FROM {". $table ."} WHERE vid > %d ORDER BY vid ASC", $context['sandbox']['current_node'], 0, $limit);
  $has_processed = FALSE;
  while ($row = db_fetch_array($result)) {

    // Try to unserialize the data column.
    if (!empty($row[$col_data])) {
      $data = unserialize($row[$col_data]);
    }
    if (empty($data)) {
      $data = array();
    }

    // Copy move the values from the columns into the array...
    $data['alt'] = $row[$col_alt];
    $data['title'] = $row[$col_title];

    // ...serialize it and store it back to the db.
    db_query("UPDATE {". $table ."} SET $col_data = '%s' WHERE vid = %d", serialize($data), $row['vid']);

    // Create the thumbnail for that image.
    $file = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = %d", $row[$col_fid]));
    if ($file && file_exists($file->filepath) && !file_exists(imagefield_file_admin_thumb_path($file))) {
      imagefield_file_insert($file);
    }

    // Update our progress information.
    $context['sandbox']['current_node'] = $row['vid'];
    $has_processed = TRUE;
  }

  if ($has_processed) {
    // Not finished, put back the field in the array.
    array_unshift($context['sandbox']['fields'], $field);
  }
  else {
    // Cleanup the old columns.
    if (db_column_exists($table, $col_alt)) {
      db_drop_field($ret, $table, $col_alt);
    }
    if (db_column_exists($table, $col_title)) {
      db_drop_field($ret, $table, $col_title);
    }

    // Process to next field.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = 0;
  }

  if (!empty($context['sandbox']['fields'])) {
    $ret['#finished'] = $context['sandbox']['progress'] / $context['sandbox']['total'];
  }

  return $ret;
}
