<?php
/* $Id: print_pdf.module,v 1.1.2.8 2008/09/10 10:37:34 jcnventura Exp $ */

/**
 * @file
 * Display printer-friendly versions of Drupal pages
 */

define('PRINTPDF_PATH', 'printpdf');

define('PRINT_PDF_LINK_POS_DEFAULT', 'link');
define('PRINT_PDF_SHOW_LINK_DEFAULT', 1);
define('PRINT_PDF_NODE_LINK_VISIBILITY_DEFAULT', 0);
define('PRINT_PDF_NODE_LINK_PAGES_DEFAULT', '');
define('PRINT_PDF_LINK_CLASS_DEFAULT', 'print-pdf');
define('PRINT_PDF_SYS_LINK_VISIBILITY_DEFAULT', 1);
define('PRINT_PDF_SYS_LINK_PAGES_DEFAULT', '<front>');
define('PRINT_PDF_BOOK_LINK_DEFAULT', 1);
define('PRINT_PDF_PDF_TOOL_DEFAULT', 0);
define('PRINT_PDF_CONTENT_DISPOSITION_DEFAULT', 2);
define('PRINT_PDF_PAPER_SIZE_DEFAULT', 'A4');
define('PRINT_PDF_PAGE_ORIENTATION_DEFAULT', 'portrait');
define('PRINT_PDF_FONT_FAMILY_DEFAULT', 'dejavusans');
define('PRINT_PDF_FONT_SIZE_DEFAULT', 10);

/**
 * Implementation of hook_theme().
 */
function print_pdf_theme() {
  return array(
    'print_pdf_format_link' => array(
      'arguments' => array(),
    ),
    'print_pdf_dompdf_footer' => array(
      'arguments' => array(),
    ),
    'print_pdf_tcpdf_header' => array(
      'arguments' => array(),
    ),
    'print_pdf_tcpdf_page' => array(
      'arguments' => array(),
    ),
    'print_pdf_tcpdf_content' => array(
      'arguments' => array(),
    ),
    'print_pdf_tcpdf_footer' => array(
      'arguments' => array(),
    ),
    'print_pdf_tcpdf_footer2' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function print_pdf_menu() {
  $items = array();

  $items[PRINTPDF_PATH] = array(
    'title' => 'Printer-friendly PDF',
    'page callback' => 'print_pdf_controller',
    'access arguments' => array('access print'),
    'type' => MENU_CALLBACK,
    'file' => 'print_pdf.pages.inc',
  );
  $items['admin/settings/print/pdf'] = array(
    'title' => 'PDF',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_pdf_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print_pdf.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_requirements().
 */
function print_pdf_requirements($phase) {
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    // At runtime, make sure that a PDF generation tool is selected
    case 'runtime':
      $print_pdf_pdf_tool = variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT);
      if (empty($print_pdf_pdf_tool)) {
        $requirements['print_pdf_tool'] = array(
          'title' => $t('Print PDF'),
          'value' => $t('No PDF tool selected. Please configure it in the <a href="@url">PDF settings page</a>.', array('@url' => url('admin/settings/print/pdf'))),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
  }
  return $requirements;
}

/**
 * Implementation of hook_link().
 */
function print_pdf_link($type, $node = NULL, $teaser = FALSE) {
  $print_pdf_link_pos = variable_get('print_pdf_link_pos', array(PRINT_PDF_LINK_POS_DEFAULT => PRINT_PDF_LINK_POS_DEFAULT));
  $allowed_type = print_pdf_link_allowed(array('type' => $type, 'node' => $node, 'teaser' => $teaser));
  if (($allowed_type) && !empty($print_pdf_link_pos['link'])) {
    drupal_add_css(drupal_get_path('module', 'print') .'/css/printlinks.css');
    $links = array();
    $format = theme('print_pdf_format_link');

    // Show book link
    if ($allowed_type === PRINT_ALLOW_BOOK_LINK) {
      $links['book_pdf'] = array('href' => PRINTPDF_PATH .'/book/export/html/'. $node->nid,
                                 'title' => $format['text'],
                                 'attributes' => $format['attributes'],
                                 'html' => $format['html'],
                                );

      return $links;
    }
    elseif ($allowed_type === PRINT_ALLOW_NORMAL_LINK) {
      $query_arr = $_GET;
      if ($type == 'comment') {
        $query_arr['comment'] = $node->cid;
      }
      $query = print_query_string_encode($query_arr, array('q'));

      $links['print_pdf'] = array('href' => PRINTPDF_PATH .'/'. $node->nid,
                                  'title' => $format['text'],
                                  'attributes' => $format['attributes'],
                                  'html' => $format['html'],
                                  'query' => $query,
                                 );

      return $links;
    }
  }
  return;
}

/**
 * Implementation of hook_help().
 */
function print_pdf_help($path, $arg) {
  $print_pdf_link_pos = variable_get('print_pdf_link_pos', array(PRINT_PDF_LINK_POS_DEFAULT => PRINT_PDF_LINK_POS_DEFAULT));
  if (print_pdf_link_allowed(array('path' => $path)) && (preg_match('!^node/!i', $path) == 0) &&
      !(empty($print_pdf_link_pos['link']) && empty($print_pdf_link_pos['corner']))) {
    static $output = FALSE;

    if ($output === FALSE) {
      drupal_add_css(drupal_get_path('module', 'print') .'/css/printlinks.css');
      $output = TRUE;
    
      return '<span class="print-syslink">'. print_pdf_insert_link() .'</span>';
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function print_pdf_nodeapi(&$node, $op = 'view', $teaser, $page) {
  switch ($op) {
    case 'view':
      $print_pdf_link_pos = variable_get('print_pdf_link_pos', array(PRINT_PDF_LINK_POS_DEFAULT => PRINT_PDF_LINK_POS_DEFAULT));
      $allowed_type = print_pdf_link_allowed(array('node' => $node, 'teaser' => $teaser));
      if (($allowed_type != FALSE) && !empty($print_pdf_link_pos['corner']) &&
          (preg_match('!^print!i', $_GET['q']) == 0)) {
        drupal_add_css(drupal_get_path('module', 'print') .'/css/printlinks.css');
        if ($allowed_type === PRINT_ALLOW_BOOK_LINK) {
          $path = PRINTPDF_PATH .'/book/export/html/'. $node->nid;
        }
        else {
          $path = NULL;
        }
        $link = print_pdf_insert_link($path);
        $node->content['print_pdf_link'] = array(
          '#value' => "<span class='print-link'>$link</span>",
          '#weight' => -3,
        );
      }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function print_pdf_form_alter(&$form, $form_state, $form_id) {
  // Add the node-type settings option to activate the PDF version link
  if ($form_id == 'node_type_form') {
    $form['print']['print_pdf_display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show PDF version link'),
      '#default_value' => variable_get('print_pdf_display_'. $form['#node_type']->type, PRINT_TYPE_SHOW_LINK_DEFAULT),
      '#description' => t('Displays the link to a PDF version of the content. Further configuration is available on the !settings.', array('!settings' => l(t('settings page'), 'admin/settings/print' ))),
    );
    $form['print']['print_pdf_display_comment'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show PDF version link in individual comments'),
      '#default_value' => variable_get('print_pdf_display_comment_'. $form['#node_type']->type, PRINT_TYPE_COMMENT_LINK_DEFAULT),
      '#description' => t('Displays the link to a PDF version of the comment. Further configuration is available on the !settings.', array('!settings' => l(t('settings page'), 'admin/settings/print' ))),
    );
  }
}

/**
 * Format the PDF version link
 *
 * @return
 *   array of formatted attributes
 * @ingroup themeable
 */
function theme_print_pdf_format_link() {
  $print_pdf_link_class  = variable_get('print_pdf_link_class', PRINT_PDF_LINK_CLASS_DEFAULT);
  $print_pdf_content_disposition = variable_get('print_pdf_content_disposition', PRINT_PDF_CONTENT_DISPOSITION_DEFAULT);
  $print_pdf_show_link = variable_get('print_pdf_show_link', PRINT_PDF_SHOW_LINK_DEFAULT);

  $text = t('PDF version');
  $img = drupal_get_path('module', 'print') .'/icons/pdf_icon.gif';
  $title = t('Display a PDF version of this page.');
  $class = strip_tags($print_pdf_link_class);
  $new_window = ($print_pdf_content_disposition == 1);
  $format = _print_format_link_aux($print_pdf_show_link, $text, $img);

  return array('text' => $format['text'],
               'html' => $format['html'],
               'attributes' => print_fill_attributes($title, $class, $new_window),
              );
}

/**
 * Auxiliary function to display a formatted Printer-friendly link
 *
 * @return string
 */
function print_pdf_insert_link($path = NULL) {
  if (user_access('access print')) {
    if ($path === NULL) {
      $path = PRINTPDF_PATH .'/'. preg_replace('!^node/!', '', $_GET['q']);
      $query = print_query_string_encode($_GET, array('q'));
      if (empty($query)) {
        $query = NULL;
      }
    }
    else {
      $query = NULL;
    }
    $format = theme('print_pdf_format_link');
    return '<span class="print_pdf">'. l($format['text'], $path, array('attributes' => $format['attributes'], 'query' => $query, 'absolute' => TRUE, 'html' => $format['html'])) .'</span>';
  }
}

/**
 * Determine a the link to the PDF version is allowed depending on all possible settings
 *
 * @param $args
 *   array containing the possible parameters:
 *    teaser, node, type, path
 * @return
 *   FALSE if not allowed
 *   PRINT_ALLOW_NORMAL_LINK if a normal link is allowed
 *   PRINT_ALLOW_BOOK_LINK if a link is allowed in a book node
 */
function print_pdf_link_allowed($args) {
  $print_pdf_pdf_tool = variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT);
  if (!empty($args['teaser']) || !user_access('access print') || (empty($print_pdf_pdf_tool))) {
    // If showing only the teaser or the user is not allowed or link is disabled
    return FALSE;
  }
  if (!empty($args['node'])) {
    static $node_type = FALSE;

    $node = $args['node'];
    if ($node_type === FALSE) {
      if (isset($node->type)) {
        $node_type = $node->type;
      }
      else {
        $node_type = '';
      }
    }
    // Node
    $print_pdf_node_link_visibility = variable_get('print_pdf_node_link_visibility', PRINT_PDF_NODE_LINK_VISIBILITY_DEFAULT);
    $print_pdf_node_link_pages = variable_get('print_pdf_node_link_pages', PRINT_PDF_NODE_LINK_PAGES_DEFAULT);

    if (!empty($node->printing) || 
        !_print_page_match($print_pdf_node_link_visibility, $print_pdf_node_link_pages)) {
      // Page not in visibility list or we are working!
      return FALSE;
    }
    elseif (isset($args['type']) && ($args['type'] == 'comment') && isset($node_type)) {
      // Link is for a comment, return the configured setting
      return variable_get('print_pdf_display_comment_'. $node_type, PRINT_TYPE_COMMENT_LINK_DEFAULT);
    }
    else {
      // Node link
      if (isset($node_type) && 
          !variable_get('print_pdf_display_'. $node_type, PRINT_TYPE_SHOW_LINK_DEFAULT)) {
        // Link for this node type is disabled
        return FALSE;
      }
      elseif (isset($node->book)) {
        // Node is a book;
        $print_pdf_book_link = variable_get('print_pdf_book_link', PRINT_PDF_BOOK_LINK_DEFAULT);
        if (!$print_pdf_book_link || !user_access('access printer-friendly version')) {
          // Book link is disabled
          return FALSE;
        }
        else {
          return PRINT_ALLOW_BOOK_LINK;
        }
      }
      else {
        return PRINT_ALLOW_NORMAL_LINK;
      }
    }
  }
  else {
    // 'System' page
    $print_pdf_sys_link_visibility = variable_get('print_pdf_sys_link_visibility', PRINT_PDF_SYS_LINK_VISIBILITY_DEFAULT);
    $print_pdf_sys_link_pages = variable_get('print_pdf_sys_link_pages', PRINT_PDF_SYS_LINK_PAGES_DEFAULT);

    return _print_page_match($print_pdf_sys_link_visibility, $print_pdf_sys_link_pages);
  }
}

/**
 * Format the dompdf footer contents
 *
 * @param $html
 *   contents of the body of the HTML from the original node
 * @ingroup themeable
 */
function theme_print_pdf_dompdf_footer(&$html) {
  return _print_pdf_dompdf_footer_aux($html);
}

/**
 * Format the TCPDF header
 *
 * @param $pdf
 *   current TCPDF object
 * @param $html
 *   contents of the body of the HTML from the original node
 * @param $font
 *   array with the font definition (font name, styles and size)
 * @ingroup themeable
 */
function theme_print_pdf_tcpdf_header(&$pdf, &$html, $font) {
  return _print_pdf_tcpdf_header_aux($pdf, $html, $font);
}

/**
 * Format the TCPDF page settings (margins, etc)
 *
 * @param $pdf
 *   current TCPDF object
 * @ingroup themeable
 */
function theme_print_pdf_tcpdf_page(&$pdf) {
  return _print_pdf_tcpdf_page_aux($pdf);
}

/**
 * Format the TCPDF page content
 *
 * @param $pdf
 *   current TCPDF object
 * @param $html
 *   contents of the body of the HTML from the original node
 * @param $font
 *   array with the font definition (font name, styles and size)
 * @ingroup themeable
 */
function theme_print_pdf_tcpdf_content(&$pdf, &$html, $font) {
  return _print_pdf_tcpdf_content_aux($pdf, $html, $font);
}

/**
 * Format the TCPDF footer contents
 *
 * @param $pdf
 *   current TCPDF object
 * @param $html
 *   contents of the body of the HTML from the original node
 * @param $font
 *   array with the font definition (font name, styles and size)
 * @ingroup themeable
 */
function theme_print_pdf_tcpdf_footer(&$pdf, &$html, $font) {
  return _print_pdf_tcpdf_footer_aux($pdf, $html, $font);
}

/**
 * Format the TCPDF footer layout
 *
 * @param $pdf
 *   current TCPDF object
 * @ingroup themeable
 */
function theme_print_pdf_tcpdf_footer2(&$pdf) {
  return _print_pdf_tcpdf_footer2_aux($pdf);
}
