<?php
/**
 * $Id: campus_management.module Shawn Arsenault Exp $
 */

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@		 First list all the hooks used in this module		@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
require_once (dirname(__FILE__) . '/management_support.inc');

class SiteLocalSearchBlock extends DrupalBlockBase {
  
  function __construct() {
    parent::__construct(
      t('Site Local Search'),
      "0",
      'sidebar_right',
      0
      );
  }
  
  function view() {
    $s = array();
    $bucket = _get_bucket();
    $s['content'] = <<<END

<script type="text/javascript">
function LocalSearchFormSubmit() {
  if (!document.forms['LocalSearchForm'].q.value.match(/site:/g)) {
    document.forms['LocalSearchForm'].q.value = document.forms['LocalSearchForm'].q.value + ' site:www.upei.ca/$bucket';
  }
  return true;
}
</script>
<form name="LocalSearchForm" method="get" target="FlyFrame" action="http://websearch.cs.upei.ca/search" onsubmit="return LocalSearchFormSubmit();">
  <input type="text" name="q" size="20" maxlength="256" value="" /><br/>
  <input type="submit" name="btnG" value="Search This Site" />
</form>
END;
    return $s;
  }
}

// listing of blocks
// These are an initiations and not an override. 
// The blocks will be created ready to go, but once
// changed in drupal, will not hold their values.
function campus_management_block($op='list', $delta='default', $edit = array()) {
  //Prepare variables to use throughout the block function
  DrupalBlockBase::register('default', new SiteLocalSearchBlock());
  switch($op) {
    case 'list':
      return DrupalBlockBase::listBlocks();
    case 'view':
    case 'configure':
    case 'save':
      return DrupalBlockBase::dispatch($delta, $op, $edit);
  }
}
// End Hook_BLOCK()**********************************************************

//***********************
// Implement hook_menu	*
//***********************
function campus_management_menu() {
  $items = array();

  $items['content/update'] = array(
    'title' => t('Content'),
    'page callback' => '_campus_management_updateable_content',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['views/embed/%/%'] = array(
    'title' => t('Show views embeded'),
    'page callback' => '_campus_maangement_views_embed',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['campus_management/menu'] = array(
    'title' => t('Menus'),
    'description' => "Control your site's navigation menu, primary links and secondary links. as well as rename and reorganize menu items.",
    'file' => 'menu.admin.inc',
    'file path' => drupal_get_path('module', 'menu'),
    'page callback' => 'menu_overview_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $path = drupal_get_path('module', 'campus_management');
  drupal_add_css($path .'/campus_management.css');
  
  return $items;
}

function _campus_management_menu_overview_page() {
  include  '/var/www-d6/current/modules/menu/menu.admin.inc';
  return menu_overview_page();
}

//End Hook_MENU()*********************************************************

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@@@@@					END OF HOOKS					@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//@@@@@@		 		Create Functions needed in this module 		@@@@@@@@@@@@@
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//*******************************************************
//Generate a page with only the content a user can edit	*
//*******************************************************
function _campus_management_updateable_content() {
  $site = explode("/", request_uri());
  $order = intval(trim($_REQUEST['_order']));
  $order = ($order == '0') ? 'DESC' : 'ASC';
  $bucket = $site[1];
  

  	$form_content = "<fieldset><label>Filter</label>";
	$form_content .= "<form name=\"frmSearch\" action=\"\" method=\"get\">";
	$form_content .= "<table width=\"500\">";
	$form_content .= "<tr>";
	$form_content .= "	<td width=\"100\"><input type=\"radio\" id=\"edit-filter-status\" name=\"filter\" value=\"status\"  checked=\"checked\"  class=\"form-radio\"> Type:</td>";
	$form_content .= "	<td><select name=\"sltType\" class=\"form-select\" id=\"edit-category\" >\n";
	$fSQL = "SELECT type, name FROM {node_type} ORDER BY name";
	$result =  db_query($fSQL);
    while ($nt = db_fetch_object($result)) {
		$type = $nt->type;
		$type_name = $nt->name;
		if($_GET['sltType'] == $type){$selected = "SELECTED";}else{$selected = "";}
		$form_content .= "<option value=\"". $type . "\" ". $selected . ">". $type_name . "</option>\n";
	}
	$form_content .= "	</select></td>";
	$form_content .= "<td><input type=\"submit\" value=\"Filter\"></td>";
	if($_GET['sltType']){$form_content .= "<td><a href=\"". base_path() . "content/update\">Undo filter</a></td>";}
	$form_content .= "</tr>";
	$form_content .= "</table>";
	$form_content .= "</form>";
	$form_content .= "</fieldset>";
	
  $page_content = $form_content;
  $page_content .= "<table width=\"100%\">\n";
  $page_content .= "<tr><th>Title</th><th width=\"75\">Type</th><th  width=\"75\" style=\"text-align:center;\">Published?</th><th width=\"75\" >Edit</th></tr>\n";
  if($_GET['sltType']) {
    $sSQL = "SELECT * FROM {node} WHERE type NOT IN ('award_node', 'timetable_node', 'full_timetable_node', 'firstyear_timetable_node', 'timetable_feed', 'news_node') AND type = '%s' ORDER BY changed DESC";
    $result =  db_query($sSQL, $_GET['sltType']);
  }
  else {
    $sSQL = "SELECT * FROM {node} WHERE type NOT IN ('award_node', 'timetable_node', 'full_timetable_node', 'firstyear_timetable_node', 'timetable_feed', 'news_node') ORDER BY changed DESC";
    $result =  db_query($sSQL);
  }
    while ($node = db_fetch_object($result)) {
    $node_object = node_load($node->nid);
        $node_access = node_access("update", $node_object);
    if($node_access){
      if($node->status){$status = "yes";}else{$status = "no";}
      if($bgcolor=="ffffff"){$bgcolor="eef2e3";}else{$bgcolor="ffffff";}
      $page_content .= "<tr style=\"background-color:#" . $bgcolor ."\"><td>" .l($node->title, 'node/'.$node->nid). "</td><td>". $node->type ."</td><td style=\"text-align:center;\">". $status ."</td><td>". l("edit", "node/" . $node->nid . "/edit") ."</td>" . "</tr>";
      }
    }
  $page_content .= "</table>";
  return $page_content;
}

function _campus_maangement_views_embed($name, $display) {
  $args = array_slice(arg(), 2);
  print call_user_func_array('views_embed_view', $args);
}


function _campus_management_content_view() {
  return '';
  
  $path = drupal_get_path('module', 'views');
  require_once "./$path/includes/view.inc";
  
  $view = new view;
  $view->name = 'content_view';
  $view->description = '';
  $view->tag = '';
  $view->view_php = '';
  $view->base_table = 'node';
  $view->is_cacheable = FALSE;
  $view->api_version = 2;
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
  $handler = $view->new_display('default', 'Defaults', 'default');
  $handler->override_option('fields', array(
    'title' => array(
      'label' => 'Title',
      'link_to_node' => 1,
      'exclude' => 0,
      'id' => 'title',
      'table' => 'node',
      'field' => 'title',
      'relationship' => 'none',
    ),
    'type' => array(
      'label' => 'Type',
      'link_to_node' => 0,
      'exclude' => 0,
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'relationship' => 'none',
    ),
  ));
  $handler->override_option('sorts', array(
    'changed' => array(
      'order' => 'DESC',
      'granularity' => 'second',
      'id' => 'changed',
      'table' => 'node',
      'field' => 'changed',
      'relationship' => 'none',
    ),
  ));
  $handler->override_option('access', array(
    'type' => 'none',
  ));
  $handler->override_option('items_per_page', 50);
  $handler->override_option('use_pager', '1');
  $handler->override_option('style_plugin', 'bulk');
  $handler->override_option('style_options', array(
    'execution_type' => '1',
    'display_type' => '0',
    'skip_confirmation' => 0,
    'display_result' => 1,
    'selected_operations' => array(
      '7a9a34556136a4e6d403cacfe0573d64' => '7a9a34556136a4e6d403cacfe0573d64',
      '2590ff43ab3648737ccd1865cd76084e' => '2590ff43ab3648737ccd1865cd76084e',
      '62984dda008cb28a75baa79ef8268e03' => 0,
      '837cbe58fd9af30cf48e5c9de552d925' => 0,
      'd0746f09756440a699f4a721c7683290' => 0,
      'b26a99d8d89001e5998b3651fa7b10ba' => 0,
      '339302ab7ef2adc1a3a9844e15e76967' => 0,
      'e865a3ac236dc71e38301049a0f356e8' => 0,
      '2fd6d151e013faf3099170a3bb1284d4' => 0,
      'bf6b6cafe38816388f6606b93b881f16' => 0,
      'c240117f80fc27a29633c29df38c3802' => 0,
      'e52c7d4b8ccc8fd7b8f7a59ca8e0e013' => 0,
      'e620912b6bfc590784848cf00c05b42f' => 0,
      'ffd4dd7c59102655f73303c040b08914' => 0,
      '2094a5f797e4c4f0f5ecc0cfcdae09de' => 0,
      '97cdd5da60cce28fec0e8a22e535938c' => 0,
      '0b086d2bd7e37bf66a3b8b0b9226249a' => 0,
      'c775ce4cea01fb1d3491f61c7cb2c2b2' => 0,
      '44601207cad7f7db21f92437c9e84938' => 0,
    ),
  ));
  $handler = $view->new_display('page', 'Page', 'page_1');
  $handler->override_option('path', 'content/edit');
  $handler->override_option('menu', array(
    'type' => 'none',
    'title' => '',
    'weight' => 0,
    'name' => 'navigation',
  ));
  $handler->override_option('tab_options', array(
    'type' => 'none',
    'title' => '',
    'weight' => 0,
  ));

  
  return $view->render('page_1');
}
// END UpdatableContent()*************************

//******************************************************************************
// The original SQL by Ryan found the current Node, Revisions, and Content Type information and merged		*
// them using the SQL JOIN operator. I removed all this and found just the node ID							*
// and used the node_load($nid) function																	*
// Added the code to get the variable to change the number of posts to list									*
//******************************************************************************


function campus_management_init($main = 0) {
  // add fancyzoom
  // drupal_add_js('misc/fancyzoom.min.js', 'module', 'header', false, true);
}

function campus_management_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  if ($op == 'list') {
    return array(0 => t('Empty paragraph filter'));
  }
  switch ($delta) {
    case 0:
    switch ($op) {
      case 'description':
        return t('Filter all empty paragraph tags');
      case 'prepare':
        return $text;
      case 'process':
        return preg_replace(
          array(
            '/<p>(&nbsp;| )*<\/p>/',
          ),
          array(
            '',
          ),
          $text
          );
    }
    break;
  }
}

function campus_management_theme_registry_alter(&$reg) {
  global $theme;
  if (preg_match("/sunshine($|_)/", $theme)) {
  foreach (array_keys($reg) as $key) {
    if (!array_key_exists(drupal_get_path('theme', 'sunshine'), $reg[$key]['theme paths'])) {
      $reg[$key]['theme paths'][] = drupal_get_path('theme', 'sunshine');
    }
    if (!array_key_exists(path_to_theme(), $reg[$key]['theme paths'])) {
      $reg[$key]['theme paths'][] = path_to_theme();
    }
  }
  }
}

/** node api to handle misc stuff */
function campus_management_nodeapi($node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type) {
    $func = 'campus_management_' . $node->type . '_' . $op;
  }
  if (function_exists($func)) {
    $params = array();
    $params[] =& $node;
    $params[] = $a3;
    $params[] = $a4;
    call_user_func_array($func, $params);
  }
}

// deal with hook form alter

// XXX dirty jobs. these functions depend on the content.
// properly generate slide image

function campus_management_slide_view(&$node) {
  $path = url(file_create_path("slide/{$node->nid}/result.png"));
  $node->content['body']['#value'] = '<h2>Resulted Image:</h2><p><a href="'.$path.'"><img height="480" width="640" src="'.$path.'" /></a></p>';
}

define('SLIDE_ONE_COLUMN', 1);
define('SLIDE_ONE_COLUMN_LEFT', 2);
define('SLIDE_ONE_COLUMN_RIGHT', 3);
define('SLIDE_TWO_COLUMNS', 4);

function _slide_annotate_image(&$image, &$draw, $x, $y, $fontsize, $linespacing, $text) {
  $draw->push();
  $values = explode("\n", $text);
  foreach ($values as $value) {
    $image->annotateImage($draw, $x, $y, 0, $value);
    $y += $fontsize * $linespacing;
  }
  $draw->pop();
  return $image;
}

function campus_management_slide_presave(&$node) {
  $width = 1024;
  $height = 768;

  if (!class_exists('imagick')) {
    drupal_set_message('Please install PECL Imagick to enable canvas drawing');
    return;
  }
  // check if imageapi_gd toolkit is there
  $path = file_create_path("slide/{$node->nid}/result.png");
  // use imageapi to open image
  $canvas = new imagick();
  $canvas->newImage($width, $height, new ImagickPixel('white'), 'png');

  // get the background image
  $background = new imagick();
  $background->readImage($node->field_slide_background[0]['filepath']);

  // composite the background onto the canvas
  $canvas->compositeImage($background, imagick::COMPOSITE_OVER, 0, 0);

  // delete background
  unset($background);

  // deal with overlays
  for ($index = count($node->field_slide_overlay) - 1; $index >=0; $index--) {
    $field = $node->field_slide_overlay[$index];
    if (!empty($field['filepath'])) {
      // create the image instance
      $image = new imagick();
      $image->readImage($field['filepath']);

      // composite the image
      $canvas->compositeImage($image, imagick::COMPOSITE_OVER, 0, 0);
      unset($image);
    }
  }

  // text attribute
  $pixel = new ImagickPixel('#7a2324');
  $pixel->setColorValue(imagick::COLOR_OPACITY, 0.25);

  $draw = new ImagickDraw();
  $draw->setFont(drupal_get_path('theme', 'sunshine') . '/fonts/GenBasB.ttf');
  $draw->setFontSize(50);
  $draw->setTextAlignment(imagick::ALIGN_CENTER);
  $draw->setFillColor(new ImagickPixel('white'));
 
  // slide title
  if (!empty($node->field_slide_title[0]['value'])) {
    $title = new imagick();
    $title->newImage(1024, 80, $pixel, 'png');
   
    $title->annotateImage($draw, 512, 55, 0, $node->field_slide_title[0]['value']);
    $canvas->compositeImage($title, imagick::COMPOSITE_OVER, 0, 0);
    unset($title);
  }

  $pixel = new ImagickPixel('black');
  $pixel->setColorValue(imagick::COLOR_OPACITY, 0.25);
  $draw->setFont('/var/www-d6/docroot/misc/Helvetica.ttf');
  $draw->setTextAlignment(imagick::ALIGN_LEFT);
  $draw->setFillColor(new ImagickPixel('white'));
  $draw->setFontSize(24);

  switch ($node->field_slide_content_layout[0]['value']) {
    case SLIDE_ONE_COLUMN:
      // slide content
      if (!empty($node->field_slide_content[0]['value'])) {
        $text = new imagick();
        $text->newImage(800, 500, $pixel, 'png');

        $value = wordwrap($node->field_slide_content[0]['value'], 68);

        _slide_annotate_image($text, $draw, 30, 40, 24, 1.5, $value);
        $canvas->compositeImage($text, imagick::COMPOSITE_OVER, 112, 120);
        unset($text);
      }
      break;
    case SLIDE_ONE_COLUMN_LEFT:
      // slide content
      if (!empty($node->field_slide_content[0]['value'])) {
        $text = new imagick();
        $text->newImage(450, 500, $pixel, 'png');

        $value = wordwrap($node->field_slide_content[0]['value'], 36);

        _slide_annotate_image($text, $draw, 30, 40, 24, 1.5, $value);
        $canvas->compositeImage($text, imagick::COMPOSITE_OVER, 41,120);

        unset($text);
      }
      break;
    case SLIDE_ONE_COLUMN_RIGHT:
      // slide content
      if (!empty($node->field_slide_content[0]['value'])) {
        $text = new imagick();
        $text->newImage(450, 500, $pixel, 'png');

        $value = wordwrap($node->field_slide_content[0]['value'], 36);

        _slide_annotate_image($text, $draw, 30, 40, 24, 1.5, $value);
        $canvas->compositeImage($text, imagick::COMPOSITE_OVER, 533, 120);

        unset($text);
      }
      break;

    case SLIDE_TWO_COLUMNS:
      // slide content
      if (!empty($node->field_slide_content[0]['value'])) {
        $text = new imagick();
        $text->newImage(450, 500, $pixel, 'png');

        $value = wordwrap($node->field_slide_content[0]['value'], 36);

        _slide_annotate_image($text, $draw, 30, 40, 24, 1.5, $value);
        $canvas->compositeImage($text, imagick::COMPOSITE_OVER, 41,120);

        unset($text);

        $text = new imagick();
        $text->newImage(450, 500, $pixel, 'png');

        $value = wordwrap($node->field_slide_content_more[0]['value'], 36);

        _slide_annotate_image($text, $draw, 30, 40, 24, 1.5, $value);
        $canvas->compositeImage($text, imagick::COMPOSITE_OVER, 533, 120);

        unset($text);

      }
      break;
  }

  // slide overlay text
  if (!empty($node->field_slide_overlay_text[0]['value'])) {
    $ovtext = new imagick();
    $ovtext->newImage(1024, 50, new ImagickPixel('transparent'), 'png');

    $value = $node->field_slide_overlay_text[0]['value'];
    
    $draw->setFontSize(20);

    $ovtext->annotateImage($draw, 500, 35, 0, $value);
    $canvas->compositeImage($ovtext, imagick::COMPOSITE_OVER, 0, 718);
    unset($ovtext);
  }

  // save the image
  $canvas->writeImage($path);

  // unset the canvas
  unset($canvas);
}

function campus_management_form_slide_node_form_alter(&$form, &$form_state) {
  unset($form['body_field']);
  // check if it's a new slide
  if (!empty($form['changed']['#default_value'])) {
    $form['resulted-image'] = array(
      '#type' => 'item',
      '#title' => t('Resulted image'),
      '#weight' => '-5',
      '#value' => '<p><img height="480" width="640" src="'.url(file_create_path("slide/{$form['#node']->nid}/result.png")).'" /></p>',
    );
  }
}

// XXX mobile-survey
function campus_management_mobile_contest_insert(&$node) {
  // set the destination
  $_REQUEST['destination'] = 'page/mobile-contest';
  // get user agent
  $node->field_survey_real_device[0]['value'] = $_SERVER['HTTP_USER_AGENT'];
  $node->field_survey_ip[0]['value'] = isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
}

function campus_management_mobile_contest_validate(&$node) {
  // validate UPEI email address
  if (!preg_match('/@upei\.ca$/i', $node->field_email[0]['email'])) {
    form_set_error('error', t('"<em>@email</em>" is not a UPEI email address', array('@email' => $node->field_email[0]['email'])));
  }
}

