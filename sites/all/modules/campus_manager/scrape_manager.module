<?php
/**
 * This is the manager for Scraping
 */
 
require_once (dirname(__FILE__) . '/management_support.inc');

class ScrapeManager {
  
  static $PERM_SITE = 'scrape website';
  static $PERM_SECTION = 'scrape section';
  static $PERM_PAGE = 'scrape one page';
  
  /**
   * Permissions for Scrape Manager
   */
  function perm() {
    return array(ScrapeManager::$PERM_SITE, ScrapeManager::$PERM_SECTION, ScrapeManager::$PERM_PAGE);
  }
  
  /**
   * Menu items for Scrape Manager
   */
  function menu() {
    $items = array();
    
      $items['scrape/site'] = array(
          'title' => t('Update Your Live Website'),
          'page callback' => '__scrape_manager_scrape_site', // for Drupal 6.x
          'access arguments' => array(ScrapeManager::$PERM_SITE), // for Drupal 6.x
          'type' => MENU_CALLBACK,
        );
    
      $items['scrape/page'] = array(
          'title' => t('Update ONLY this Page to Your Live Website'),
          'page callback' => '__scrape_manager_scrape_page',  // for Drupal 6.x
          'access arguments' => array(ScrapeManager::$PERM_PAGE), // for Drupal 6.x
          'type' => MENU_CALLBACK,
        );
    
      $items['scrape/section'] = array(
          'title' => t('Update ONLY this Section to Your Live Website'),
          'page callback' => '__scrape_manager_scrape_section',
          'access arguments' => array(ScrapeManager::$PERM_SECTION),
          'type' => MENU_CALLBACK,
        );

      $items['scrape/endpoint'] = array(
          'title' => t('Scrape Endpoint'),
          'page callback' => '__scrape_manager_scrape_endpoint',
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
        );
    
    return $items;
  }
  
  /** quick dirty run scrape command */
  function scrapeEndpoint() {
    
    
    // we are going to get the parameter from _REQUEST
    
    $arg1 = isset($_REQUEST['arg1']) ? trim($_REQUEST['arg1']) : false;
    $arg2 = isset($_REQUEST['arg2']) ? trim($_REQUEST['arg2']) : '';
    
    if (!$arg1) {
      print 'Invalid parameter!';
      return;
    }
    
    // let's do permission check first
	$choice = 'none';
	if (!empty($arg2)) {
		$choice = 'page';
	}
	else {
		if (strpos($arg1, '/') == false) {
			$choice = 'site';
		}
		else {
			$choice = 'section';
		}
	}

	switch($choice) {
		case 'site':
			if (!user_access(ScrapeManager::$PERM_SITE)) {
				print(t('You have no permission to scrape site ' . $arg1));
				return;
			}
			break;
		case 'section':
			if (!user_access(ScrapeManager::$PERM_SECTION)) {
				print(t('You have no permission to scrape section ' . $arg1));
				return;
			}
			break;
		case 'page':
			if (!user_access(ScrapeManager::$PERM_PAGE)) {
				print(t('You have no permission to scrape page ' . $arg1 . ' ' . $arg2));
				return;
			}
			break;
		default:
			print(t('You have no permission to scrape anything.'));
			return;
	}

    $start_time = time();
    
    $scrape_script = drupal_get_path('module', 'scrape_manager') . '/scrape.sh';
    
    $command = "sudo -u drupal $scrape_script -f $arg1 $arg2";
    
    system($command, $result);
    if ($result) {
      print 'cannot execute command: ' . $command;
    }
    
    watchdog('site mirror', "$arg1/$arg2 is scraped.", array(), WATCHDOG_WARNING);

    // $subject = t("site update message: $arg1/$arg2 has been updated");
    // $body = t($message2 . "\n\nhttp://cms.upei.ca/$arg1/$arg2");
    // $from = variable_get('site_mail','webmaster@upei.ca');
    // drupal_mail('site-mirror', 'davcormier@upei.ca', $subject, $body, $from);
  }
  
  function createScrapeContent($url, $message) {
    $path = url(drupal_get_path('module', 'scrape_manager'));
    $goback = trim($_REQUEST['uri']);
    
    $page_content = <<<EOF
<div>
  <input type="checkbox" name="scrape_confirm_box" id="scrape_confirm_box" />
  <label for="scrape_confirm_box" id="scrape_confirm_box_label">$message</label><br />
  <div style="height: 24px; margin: 3px">
  <button id="scrape_confirm_button">Scrape!</button><img src="$path/ajax-loader.gif" width="16" height="16" alt="Loading" id="scrape_loading_indicator" style="display: none; margin-bottom: -3px" /><button id="scrape_done_goback" style="display: none;">Go Back to Previous Page</button>
  </div>
</div>
<script type="text/javascript">
  $(function() {
    $('#scrape_done_goback').click(function () {
      window.location.href = '$goback';
    });
    $('#scrape_confirm_button').click(function() {
      if ($('#scrape_confirm_box').attr('checked')) {
        // disable the button first
        $('#scrape_confirm_button').attr('disabled', 'disabled');
        $('#scrape_loading_indicator').css('display', 'inline');
        // start scraping
        $('#scrape_content').load('$url',
            {},
            function (response, status, request) {
              $('#scrape_loading_indicator').css('display', 'none');
              $('#scrape_done_goback').css('display', 'inline');
            }
        );
      }
      else {
        $('#scrape_confirm_box_label').css('color', 'red');
        $('#scrape_confirm_box_label').css('font-weight', 'bold');
      }
    });
  });
</script>
<div>
Log: <br />
<textarea id="scrape_content" style="width: 500px; height: 400px"></textarea>
</div>
EOF;
    return $page_content;
  }
  
  function scrapeSite() {
    $site = request_uri();
    $site = explode('/', $site);
    
    $url = url('scrape/endpoint', array(
      'query' => array(
        'arg1' => $site[1],
        ),
      )
    );
    
    return $this->createScrapeContent($url, 'Please check the box to confirm to Scrape the Site');
  }
  
  function scrapeSection() {
    $site = trim($_REQUEST['uri']);
    $site = explode('/', $site);
    
    $url = url('scrape/endpoint', array(
      'query' => array(
        'arg1' => "{$site[1]}/{$site[2]}",
        ),
      )
    );
    
    return $this->createScrapeContent($url, 'Please check the box to confirm to Scrape the Section');
  }
  
  function scrapePage() {
    $site = trim($_REQUEST['uri']);
    $site = explode('/', $site);
    
    $url = url('scrape/endpoint', array(
      'query' => array(
        'arg1' => $site[1],
        'arg2' => implode('/', array_slice($site, 2)),
        ),
      )
    );
    
    return $this->createScrapeContent($url, 'Please check the box to confirm to Scrape the Page');
  }
  
  /**
   * Blocks
   */
  function block($op, $delta) {
    $block = new ScrapeBlock();

    switch ($op) {
      case 'list':
        return array(
          $block->info()
          );
      case 'view':
        return $block->view();
    }
  }
}

/** The Scrape Block */
final class ScrapeBlock extends DrupalBlockBase {
  
  function __construct() {
    parent::__construct(
      t('Scrape controls'),
      "1",
      "sidebar_left",
      -7
      );
  }
  
  function view() {
    
    $site = explode("/", request_uri()); //Get the Bucket Name
    $path = drupal_get_path('module', 'campus_management'); //get the modules path
    
    $block_content = '';
    
    // show nothing if it's already under scrape
    if ($site[2] == 'scrape') {
      return;
    }
    
   // scrape site
    if (user_access(ScrapeManager::$PERM_SITE)) {
      $image = "<img style=\"border:1px solid #cccccc;\" src=\"/{$site[1]}/{$path}/images/allgolive.jpg\" alt=\"Scrape Website\"/>";
      $block_content .= l($image, 'scrape/site',
        array(
          'query' => array(
            'uri' => request_uri(),
            ),
          'html' => true,
          )
      );
    }
    
    // scrape section
    if (user_access(ScrapeManager::$PERM_SECTION)) {
      $image = "<img style=\"border:1px solid #cccccc;\" src=\"/{$site[1]}/{$path}/images/minegolive.jpg\" alt=\"Scrape Section\"/>";
      // make sure section scrape does not appear when it is under admin
      if ($site[2] != 'admin') {
        $block_content .= l($image, 'scrape/section',
          array(
            'query' => array(
              'uri' => request_uri(),
              ),
            'html' => true,
            )
        );
      }
    }
    
	// scrape page
    if (user_access(ScrapeManager::$PERM_PAGE)) {
      $image = "<img style=\"border:1px solid #cccccc;\" src=\"/{$site[1]}/{$path}/images/onegolive.jpg\" alt=\"Scrape Page\"/>";
      $page_scrape_content = l($image, 'scrape/page',
        array(
          'query' => array(
            'uri' => request_uri(),
            ),
          'html' => true,
          )
      );
      // get the node number
      $node_number = $this->get_node_number();
      if ($node_number) {
        $node_object = node_load($node_number);
        $node_access = node_access('update', $node_object);
        // if the current user has this node's update access permission
        if ($node_access) {
          $block_content .= $page_scrape_content;
        }
      }
      /*
      else {
        $alias = str_replace("/{$site[1]}/", '', request_uri());
        // if this is a view and the current user has permission to administer this view
        $isView = $this->checkView($alias);
        if ($isView) {
          if (user_access('administer views')) {
            $block_content .= $page_scrape_content;
          }
        }
      }
      */
    }
 
 // get the last access date
    if (user_access(ScrapeManager::$PERM_SITE) ||
        user_access(ScrapeManager::$PERM_SECTION) ||
        user_access(ScrapeManager::$PERM_PAGE)) {
          $sql = "SELECT w.timestamp, w.uid, w.message, u.name FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid WHERE w.type = 'site mirror' ORDER BY w.timestamp DESC LIMIT 1";
          $result = db_query($sql);
          $row = db_fetch_array($result);
          $last_access_time = ScrapeBlock::time_since($row['timestamp']);
					$block_content .= '<p><b>Last scraped by ' . $row['name'] . ' ' . $last_access_time . ' ago</b></p>';
    }
    
    // set up the block if we have block content
    if (!empty($block_content)) {
      $block['subject'] = 'Update Live Version';
      $block['content'] = $block_content;
      return $block;
    }
    else {
      return;
    }
  }
  
  static function time_since($original) {
       // array of time period chunks
       $chunks = array(
           array(60 * 60 * 24 * 365 , 'year'),
           array(60 * 60 * 24 * 30 , 'month'),
           array(60 * 60 * 24 * 7, 'week'),
           array(60 * 60 * 24 , 'day'),
           array(60 * 60 , 'hour'),
           array(60 , 'minute'),
       );
       $today = time(); /* Current unix time  */
       $since = $today - $original;
       if($since > 604800) {
         $print = date("M jS", $original);
         if($since > 31536000) {
             $print .= ", " . date("Y", $original);
           }
         return $print;
       }

       // $j saves performing the count function each time around the loop
       for ($i = 0, $j = count($chunks); $i < $j; $i++) {
           $seconds = $chunks[$i][0];
           $name = $chunks[$i][1];
           // finding the biggest chunk (if the chunk fits, break)
           if (($count = floor($since / $seconds)) != 0) {
               // DEBUG print "<!-- It's $name -->\n";
               break;
           }
       }
       $print = ($count == 1) ? '1 '.$name : "$count {$name}s";
       return $print;
   }
  //***********************************************************
  // Get the Node Number										*
  // Returns the node number									*
  // Used for the Scrape one page block visibility block[1]	*
  //***********************************************************
  function get_node_number(){
  	$site = explode("/", request_uri());            
  		if($site[2] == "node" && is_numeric($site[3])){
  			$node_number = $site[3];
  		}else{
  			$nodetemp = explode("/", $_GET['q']);
  			if(is_numeric($nodetemp[1])){$node_number = $nodetemp[1];}
  		}
                 return $node_number;
  }
  // END get_node_number()**************************************
  //***********************************************************************************
  // Check and see if the page is a view? 											*
  // Will return the name of the view if the page is a view							*
  // Used for the one page scrape block visibility if user and administer view access	*
  // **********************************************************************************
  function checkView($uri){
  	$iFlag = 0;
  	$sSQL = "SELECT name, url FROM {views_view} WHERE url = '" . $uri ."'";
  	$result =  db_query($sSQL);
    	$node = db_fetch_object($result); 		
  	$ViewName = $node->name;

  	return $ViewName;
  }
  // END CheckView($uri)**************************************************************
}

function __scrape_manager_scrape_site() {
  $sm = new ScrapeManager();
  return $sm->scrapeSite();
}

function __scrape_manager_scrape_section() {
  $sm = new ScrapeManager();
  return $sm->scrapeSection();
}

function __scrape_manager_scrape_page() {
  $sm = new ScrapeManager(); 
  return $sm->scrapePage();
}

function __scrape_manager_scrape_endpoint() {
  $sm = new ScrapeManager();
  return $sm->scrapeEndpoint();
}

function scrape_manager_menu() {
  $sm = new ScrapeManager();
  return $sm->menu();
}

function scrape_manager_block($op, $delta=0) {
  $sm = new ScrapeManager();
  return $sm->block($op, $delta);
}

function scrape_manager_perm() {
  $sm = new ScrapeManager();
  return $sm->perm();
}
